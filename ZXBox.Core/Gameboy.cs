using System.Collections.Generic;
using ZXBox.Core.Cpus.Sharp;
using ZXBox.Hardware.Interfaces;

namespace ZXBox;

public class Gameboy : LR35902
{
    public List<byte[]> Roms = new List<byte[]> { new byte[0x4000], new byte[0x4000] };
    public List<byte[]> Banks = new List<byte[]> { new byte[0x4000], new byte[0x4000], new byte[0x4000], new byte[0x4000], new byte[0x4000], new byte[0x4000], new byte[0x4000] };
    public List<byte[]> RamBanks = new List<byte[]> { new byte[0x2000], new byte[0x2000], new byte[0x2000] };
    byte[] VideoMemory = new byte[0x2000];
    byte[] InternalRam = new byte[0x2000];
    byte[] SpriteAttributes = new byte[0x9F];
    byte[] IO = new byte[0x80];
    byte[] HighRam = new byte[0x7E];
    byte InteruptRegister = 0;
    public List<IInput> InputHardware = new List<IInput>();
    public List<IOutput> OutputHardware = new List<IOutput>();

    // int bank = 0;
    int rom = 0;
    public override void WriteByteToMemory(ushort address, byte bytetowrite)
    {
        if (address <= 0x3FFF) //rom
        {
            Roms[0][address & 0xffff] = (byte)(bytetowrite & 0xff);
        }
        else if (address >= 0x4000 && address <= 0x7FFF) //Switchable rom
        {
            Banks[rom][address - 0x4000] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0x8000 && address <= 0x9FFF) //Video memory
        {
            VideoMemory[address - 0x8000] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0xA000 && address <= 0xBFFF) //Switchable RAM Bank
        {
            RamBanks[0][address - 0xA000] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0xC000 && address <= 0xDFFF) //Internal RAM
        {
            InternalRam[address - 0xC000] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0xFE00 && address <= 0xFE9F) //OAM - Object Attribute Memory
        {
            SpriteAttributes[address - 0xFE00] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0xFF00 && address <= 0xFF7F) //IO
        {
            IO[address - 0xFF00] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address >= 0xFF80 && address <= 0xFFFE) //HighRam
        {
            HighRam[address - 0xFF80] = (byte)(bytetowrite & 0xff); ;
        }
        else if (address == 0xFFFF) //Interupt Register
        {
            InteruptRegister = (byte)(bytetowrite & 0xff); ;
        }
    }

    public override void WriteWordToMemory(ushort address, ushort word)
    {
        WriteByteToMemory(address, (byte)(word & 0xff));
        address++;
        WriteByteToMemory(address, (byte)(word >> 8));
    }

    public override byte ReadByteFromMemory(ushort address)
    {
        if (IO[0xFF50 - 0xFF00] == 0 && address < GameboyClassic.Length)
        {
            return GameboyClassic[address];
        }
        if (address <= 0x3FFF) //rom
        {
            return Roms[0][address & 0xffff];
        }
        else if (address >= 0x4000 && address <= 0x7FFF) //Switchable rom
        {
            return Banks[rom][address - 0x4000];
        }
        else if (address >= 0x8000 && address <= 0x9FFF) //Video memory
        {
            return VideoMemory[address - 0x8000];
        }
        else if (address >= 0xA000 && address <= 0xBFFF) //Switchable RAM Bank
        {
            return RamBanks[0][address - 0xA000];
        }
        else if (address >= 0xC000 && address <= 0xDFFF) //Internal RAM
        {
            return InternalRam[address - 0xC000];
        }
        else if (address >= 0xFE00 && address <= 0xFE9F) //SpriteAttributes
        {
            return SpriteAttributes[address - 0xFE00];
        }
        else if (address >= 0xFF00 && address <= 0xFF7F) //IO
        {
            return IO[address - 0xFF00];
        }
        else if (address >= 0xFF80 && address <= 0xFFFE) //HighRam
        {
            return HighRam[address - 0xFF80];
        }
        else if (address == 0xFFFF) //Interupt Register
        {
            return InteruptRegister;
        }

        return 0;
    }

    public static byte[] GameboyClassic = {
            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
            0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
            0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
            0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
            0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
            0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
            0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
            0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
        };
}
