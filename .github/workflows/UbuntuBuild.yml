# This is a basic workflow to help you get started with Actions

name: Deploy sample project Ubuntu
env:
  PUBLISH_DIR: Platforms/ZXBox.Blazor/bin/Release/net6.0/publish/wwwroot
  PROJECT: Platforms/ZXBox.Blazor/ZXBox.Blazor.csproj
  SUBFOLDER: ZXSpectrum


# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on:  ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
          
      - name: Install tools
        run: dotnet workload install wasm-tools
      
      - name: Publish application
        run: dotnet publish -c Release ${{ env.PROJECT }}
        
      - name: Change base-tag in index.html from / to BlazorGitHubPagesDemo
        run: sed -i 's/<base href="\/" \/>/<base href="\/${{ env.SUBFOLDER }}\/" \/>/g' ${{ env.PUBLISH_DIR }}/index.html

 
        # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. 
        # Allow files and folders starting with an underscore.
      - name: Add .nojekyll file
        run: touch ${{ env.PUBLISH_DIR }}/.nojekyll
        
        # copy index.html to 404.html to serve the same file when a file is not found this makes deep linking possible
      - name: copy index.html to 404.html
        run: cp ${{ env.PUBLISH_DIR }}/index.html ${{ env.PUBLISH_DIR }}/404.html
      
         #Add .giattributes file so all files are handled as binary
      - name: Add .giattributes
        run:  echo "* binary" > "${{ env.PUBLISH_DIR }}/.gitattributes"
        
      - name: Commit to GitHub pages Repo
        if: success()
        uses: crazy-max/ghaction-github-pages@v1.5.1
        with:
          target_branch: gh-pages
          build_dir: ${{ env.PUBLISH_DIR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
